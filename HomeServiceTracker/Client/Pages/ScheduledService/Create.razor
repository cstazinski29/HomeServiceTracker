@using HomeServiceTracker.Shared.Models.ScheduledService
@using HomeServiceTracker.Shared.Models.ServiceItem
@using HomeServiceTracker.Shared.Models.HomeInfo
@using HomeServiceTracker.Shared.Models.ServiceProviderInfo
@using Microsoft.AspNetCore.Authorization
@inject HttpClient http
@inject NavigationManager navigation
@attribute [Authorize]

@page "/ScheduledService/Create"

<h3>Create</h3>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

<div class="container">
    <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
        <div class="form-group">
            <label>Service Name</label>
            @*<InputNumber class="form-control" @bind-Value="model.ServiceItemId" />*@

            <select class="form-control" @bind="model.ServiceItemId"> 
                <option value="">-- Select Service --</option> 
                @foreach (var service in serviceItemList) 
                { 
                    <option value="@service.Id">@service.ServiceName</option> 
                } 
            </select>

        </div>
        <div class="form-group">
            <label>Home</label>
            @*<InputNumber class="form-control" @bind-Value="model.HomeId" />*@

            <select class="form-control" @bind="model.HomeId"> 
                <option value="">-- Select Home --</option> 
                @foreach (var home in homeList) 
                { 
                    <option value="@home.Id">@home.HomeName</option> 
                } 
            </select>

        </div>
        <div class="form-group">
            <label>Last Service Date</label>
            <InputDate class="form-control" @bind-Value="model.LastServiceDate" />
        </div>
        <div class="form-group">
            <label>Next Service Date</label>
            <InputDate class="form-control" @bind-Value="model.NextServiceDate" />
        </div>
        <div class="form-group">
            <label>Scheduled Service Date</label>
            <InputDate class="form-control" @bind-Value="model.ScheduledServiceDate" />
        </div>
@*        <div class="form-group">
            <label>Service Completed</label>
            <InputCheckbox class="form-control form-check-input" @bind-Value="model.ServiceCompleted" />
        </div>*@
        <div class="form-group">
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="flexCheckDefault" @bind-Value="model.ServiceCompleted" />
                <label class="form-check-label" for="flexCheckDefault">
                    Service Completed
                </label>
            </div>
        </div>

        <div class="form-group">
            <label>Service Provider</label>
            @*<InputNumber class="form-control" @bind-Value="model.ServiceProviderId" />*@

            <select class="form-control" @bind="model.ServiceProviderId"> 
                <option value="">-- Select Service Provider --</option> 
                @foreach (var serviceProvider in serviceProviderList) 
                { 
                    <option value="@serviceProvider.Id">@serviceProvider.ServiceProviderName</option> 
                } 
            </select>

        </div>
@*        <div class="form-group">
            <label>Service Cost</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceCost" />
        </div>
        <div class="form-group">
            <label>Service Rating</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceRating" />
        </div>*@

        <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
        <div class="d-flex justify-content-end mt-3">
            <div class="text-center justify-content-between">
                <a href="/scheduledService/index" class="btn btn-outline-primary">Back to Index</a>
            </div>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
</div>

@code {
    private ScheduledServiceCreate model = new();
    private string errorMessage;

    //private List<ServiceItemListItem> serviceItem;
    private List<ServiceItemListItem> serviceItemList = new List<ServiceItemListItem>();
    private List<HomeInfoListItem> homeList = new List<HomeInfoListItem>();
    private List<ServiceProviderInfoListItem> serviceProviderList = new List<ServiceProviderInfoListItem>();

    protected override async Task OnInitializedAsync()
    {
        serviceItemList = await http.GetFromJsonAsync<List<ServiceItemListItem>>("/api/serviceItem");
        homeList = await http.GetFromJsonAsync<List<HomeInfoListItem>>("/api/homeInfo");
        serviceProviderList = await http.GetFromJsonAsync<List<ServiceProviderInfoListItem>>("/api/serviceProviderInfo");
    }



    private async void HandleSubmit()
    {
        var createRes = await http.PostAsJsonAsync<ScheduledServiceCreate>("/api/scheduledService", model);
        if (createRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/scheduledService/Index");
        }
        else
        {
            errorMessage = "Could not create your service right now. Please try again later.";
        }
    }

    //List<ServiceItemListItem> serviceItemList = new List<ServiceItemListItem>();

    //private async Task<List<ServiceItemListItem>> OnInitAsync()
    //{
    //    serviceItemList = await http.GetFromJsonAsync<List<ServiceItemListItem>>("/api/serviceItem");
    //}


    //private async void GetServiceItemList()
    //{
    //    //var serviceItemOptions = new List<SelectListItem>();
    //    //serviceItemOptions = await http.GetFromJsonAsync<SelectList<ServiceItemListItem>("serviceName","serviceItemId")>("/api/serviceItem");
    //    var so = new SelectList((await http.GetFromJsonAsync<ServiceItemListItem>("/api/serviceItem").ToList()), "ServiceName", "ServiceItemId");
    //}

    //private IEnumerable<SelectListItem> serviceItemOptions = new List<SelectListItem>();
    //serviceItemOptions = await _context.ServiceItems.Select(s => new SelectListItem()
    //        {
    //            Text = s.ServiceName,
    //            Value = s.Id.ToString()
    //        }).ToListAsync();
}