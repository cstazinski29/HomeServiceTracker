@using HomeServiceTracker.Shared.Models.HomeInfo
@using HomeServiceTracker.Shared.Models.ScheduledService
@using HomeServiceTracker.Shared.Models.ServiceItem
@using HomeServiceTracker.Shared.Models.ServiceProviderInfo
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation
@inject HttpClient http
@inject IJSRuntime js
@attribute [Authorize]

@page "/scheduledService/edit/{scheduledServiceId:int}"

<h3>Edit Scheduled Service: @*@model.ServiceName*@</h3>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

<div class="container">
    <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
        <div class="form-group">
            <label>Service Name</label>
            @*<InputNumber class="form-control" @bind-Value="model.ServiceItemId" />*@

            <select class="form-control" @bind="model.ServiceItemId"> 
                <option value="">-- Select Service --</option> 
                @foreach (var service in serviceItemList) 
                { 
                    <option value="@service.Id">@service.ServiceName</option> 
                } 
            </select>
        </div>
        <div class="form-group">
            <label>Home</label>
            @*<InputNumber class="form-control" @bind-Value="model.HomeId" />*@

            <select class="form-control" @bind="model.HomeId"> 
                <option value="">-- Select Home --</option> 
                @foreach (var home in homeList) 
                { 
                    <option value="@home.Id">@home.HomeName</option> 
                } 
            </select>
        </div>
        <div class="form-group">
            <label>Scheduled Service Date</label>
            <InputDate class="form-control" @bind-Value="model.ScheduledServiceDate" />
        </div>
        <div class="form-group">
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="flexCheckDefault" @bind-Value="model.ServiceCompleted" />
                <label class="form-check-label" for="flexCheckDefault">
                    Service Completed
                </label>
            </div>
        </div>

@*        <div class="form-group">
            <label>Service Completed</label>
            <InputCheckbox class="form-control" @bind-Value="model.ServiceCompleted" />
        </div>*@
        <div class="form-group">
            <label>Service Provider</label>
            @*<InputNumber class="form-control" @bind-Value="model.ServiceProviderId" />*@

            <select class="form-control" @bind="model.ServiceProviderId"> 
                <option value="">-- Select Service Provider --</option> 
                @foreach (var serviceProvider in serviceProviderList) 
                { 
                    <option value="@serviceProvider.Id">@serviceProvider.ServiceProviderName</option> 
                } 
            </select>
        </div>
        <div class="form-group">
            <label>Service Cost</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceCost" />
        </div>
        <div class="form-group">
            <label>Service Rating</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceRating" />
        </div>
        <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
        <div class="d-flex justify-content-end mt-3">
            <div class="text-center justify-content-between">
                @*<a href=@($"scheduledService/delete/{scheduledServiceId}") class="btn btn-outline-danger">Delete</a>*@
                <a href="/scheduledService/index" class="btn btn-outline-primary">Back to Index</a>
                <button class="btn btn-danger" @onclick="@(()=> Delete(model.Id))">Delete</button>
            </div>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
</div>

@code {
    [Parameter]
    public int scheduledServiceId { get; set; }
    //private ScheduledServiceEdit model { get; set; }
    private ScheduledServiceEdit model = new();
    private string errorMessage { get; set; }

    //private List<ServiceItemListItem> serviceItem;
    private List<ServiceItemListItem> serviceItemList = new List<ServiceItemListItem>();
    private List<HomeInfoListItem> homeList = new List<HomeInfoListItem>();
    private List<ServiceProviderInfoListItem> serviceProviderList = new List<ServiceProviderInfoListItem>();


    protected override async Task OnInitializedAsync()
    {
        model = await http.GetFromJsonAsync<ScheduledServiceEdit>($"/api/scheduledService/{scheduledServiceId}");
        serviceItemList = await http.GetFromJsonAsync<List<ServiceItemListItem>>("/api/serviceItem");
        homeList = await http.GetFromJsonAsync<List<HomeInfoListItem>>("/api/homeInfo");
        serviceProviderList = await http.GetFromJsonAsync<List<ServiceProviderInfoListItem>>("/api/serviceProviderInfo");
    }

    private async void HandleSubmit()
    {
        var createRes = await http.PutAsJsonAsync<ScheduledServiceEdit>($"/api/scheduledService/edit/{scheduledServiceId}", model);
        if (createRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/scheduledService/{scheduledServiceId}");
        }
        else
        {
            errorMessage = "Could not update your service item right now. Please try again later.";
        }
    }

    private async Task Delete(int scheduledServiceId)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Scheduled Service #{model.ServiceItemId}?"))
        {
            var deleteRes = await http.DeleteAsync($"/api/scheduledService/{scheduledServiceId}");
            if (deleteRes.IsSuccessStatusCode)
            {
                navigation.NavigateTo("/scheduledService/Index");
            }

            // if not successful, give user an error message
            else
            {
                errorMessage = "Failed to delete your scheduled service.";
            }
        }
    }
}
