@using HomeServiceTracker.Shared.Models.ScheduledService
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation
@inject HttpClient http
@attribute [Authorize]

@page "/scheduledService/edit/{scheduledServiceId:int}"

<h3>Edit Scheduled Service: @*@model.ServiceName*@</h3>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

<div class="container">
    <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
        <div class="form-group">
            <label>Service Name</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceItemId" />
        </div>
        <div class="form-group">
            <label>Home Name</label>
            <InputNumber class="form-control" @bind-Value="model.HomeId" />
        </div>
        <div class="form-group">
            <label>Service Frequency</label>
            <InputDate class="form-control" @bind-Value="model.ScheduledServiceDate" />
        </div>
        <div class="form-group">
            <label>Service Completed</label>
            <InputCheckbox class="form-control" @bind-Value="model.ServiceCompleted" />
        </div>
        <div class="form-group">
            <label>Service Provider Id</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceProviderId" />
        </div>
        <div class="form-group">
            <label>Service Cost</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceCost" />
        </div>
        <div class="form-group">
            <label>Service Rating</label>
            <InputNumber class="form-control" @bind-Value="model.ServiceRating" />
        </div>
        <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
</div>

@code {
    [Parameter]
    public int scheduledServiceId { get; set; }
    //private ScheduledServiceEdit model { get; set; }
    private ScheduledServiceEdit model = new();
    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = await http.GetFromJsonAsync<ScheduledServiceEdit>($"/api/scheduledService/{scheduledServiceId}");
    }

    private async void HandleSubmit()
    {
        var createRes = await http.PutAsJsonAsync<ScheduledServiceEdit>($"/api/scheduledService/edit/{scheduledServiceId}", model);
        if (createRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/scheduledService/{scheduledServiceId}");
        }
        else
        {
            errorMessage = "Could not update your service item right now. Please try again later.";
        }
    }
}
