@using HomeServiceTracker.Shared.Models.ServiceItem
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation
@inject HttpClient http
@inject IJSRuntime js
@attribute [Authorize]

@page "/serviceItem/edit/{serviceItemId:int}"

<h3>Edit Service Item: @*@model.ServiceName*@</h3>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

<div class="container">
    <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
        <div class="form-group">
            <label>Service Name</label>
            <InputText class="form-control" @bind-Value="model.ServiceName" />
        </div>
        <div class="form-group">
            <label>Service Description</label>
            <InputText class="form-control" @bind-Value="model.ServiceDescription" />
        </div>
        <div class="form-group">
            <label>Service Frequency</label>

            <select class="form-control" @bind="model.ServiceFrequency"> 
                <option value="">-- Select Frequency --</option> 
                @foreach (var f in serviceFrequencyValues) 
                { 
                    <option>@f.ToString()</option> 
                } 
            </select>
        </div>
        <button type="submit" class="btn btn-success btn-block mt-5">Submit</button>
        <div class="d-flex justify-content-end mt-3">
            <div class="text-center justify-content-between">
                <a href="/serviceItem/index" class="btn btn-outline-primary">Back to Index</a>
                <button class="btn btn-danger" @onclick="@(()=> Delete(model.Id))">Delete</button>
            </div>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
</div>

@code {
    [Parameter]
    public int serviceItemId { get; set; }
    private ServiceItemEdit model = new();
    private string errorMessage { get; set; }
    private string[] serviceFrequencyValues { get; set; } = Enum.GetNames(typeof(Frequency));

    protected override async Task OnInitializedAsync()
    {
        model = await http.GetFromJsonAsync<ServiceItemEdit>($"/api/serviceItem/{serviceItemId}");
    }

    private async void HandleSubmit()
    {
        var createRes = await http.PutAsJsonAsync<ServiceItemEdit>($"/api/serviceItem/edit/{serviceItemId}", model);
        if (createRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/serviceItem/{serviceItemId}");
        }
        else
        {
            errorMessage = "Could not update your service item right now. Please try again later.";
        }
    }

    private async Task Delete(int serviceItemId)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {model.ServiceName}?"))
        {
            // call Delete request on API
            var deleteRes = await http.DeleteAsync($"/api/serviceItem/{serviceItemId}");

            // check to make sure call was a success
            // if successful, navigate back to the Index.razor component
            if (deleteRes.IsSuccessStatusCode)
            {
                navigation.NavigateTo("/serviceItem/Index");
            }

            // if not successful, give user an error message
            else
            {
                errorMessage = "Failed to delete your service item.";
            }
        }
    }

    public enum Frequency
    {
        Yearly,
        Monthly,
        Weekly,
        Daily
    }
}
